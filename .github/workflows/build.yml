name: Run Tests and Build Quit Store Releases

on: [push]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        python: [3.7, 3.8, 3.9]
        # include:
        #   - python: "3.10.0-rc.1"
        #     experimental: true

    runs-on: ubuntu-latest

    steps:
    # Configures the python version
    - uses: actions/setup-python@v2
      with:
        # The Node.js version to configure
        python-version: ${{ matrix.python }}
    - name: Print Versions
      run: |
           python --version
           git --version
    - uses: actions/checkout@v2
    - name: Install Required Packages
      run: sudo apt-get install cmake libssl-dev libssh2-1-dev
    - name: Install Python Dependencies
      run: |
           pip install -U setuptools
           pip install -r requirements.txt
           pip install coveralls
    - name: Check Conding style
      run: pylava
    - name: Set Git user
      run: |
           git config --global user.email "quittestsystem@example.org"
           git config --global user.name "Quit CI Tests"
    - name: Run Tests
      run: |
           coverage run -a --source=quit tests/test_app.py
           coverage run -a --source=quit tests/test_cache.py
           coverage run -a --source=quit tests/test_conf.py
           coverage run -a --source=quit tests/test_core.py
           coverage run -a --source=quit tests/test_endpoint.py
           coverage run -a --source=quit tests/test_git.py
           coverage run -a --source=quit tests/test_graphs.py
           coverage run -a --source=quit tests/test_helpers.py
           coverage run -a --source=quit tests/test_namespace.py
           coverage run -a --source=quit tests/test_provenance.py
    - name: Coverage
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_SERVICE_NAME: github
      run: |
           coverage report -m
           coveralls

  release:
    runs-on: ${{ matrix.os }}
    needs: test
    #if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        python-version: [3.9]
        os: ['windows-2019', 'ubuntu-18.04', 'macos-11']
      fail-fast: false
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install apt packages
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq \

      - name: Patch Windows requirements
        if: startsWith(matrix.os, 'windows')
        run: |
             git apply requirements.txt.windows.patch

      - name: Pyinstaller
        run: |
          # Update pip
          python -m pip install -U pip setuptools wheel
          # Install dependencies
          pip install --progress-bar=off -U -r requirements.txt
          # Install PyInstaller
          pip install --progress-bar=off pyinstaller
          # Run PyInstaller
          pyinstaller quit.spec

      - name: Rename Lin and Mac Release
        if: ${{ !startsWith(matrix.os, 'windows') }}
        run: cp ./dist/run ./dist/quit-${{ matrix.os }}

      - name: Rename Win Release
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: cp ./dist/run.exe ./dist/quit-${{ matrix.os }}.exe

      #- name: Prepare Deployment
      #  run: |
      #       mkdir dist
      #       # Linux 64bit
      #       docker run -v "${{ github.workspace }}:/src/" ghcr.io/white-gecko/docker-pyinstaller:master-py3-amd64
      #       cp dist/linux/run dist/quit-64bit-linux
      #       # Linux 32bit, requires libgit2 from source, as no wheel is available on pypi
      #       docker run -v "${{ github.workspace }}:/src/" --entrypoint /bin/sh ghcr.io/white-gecko/docker-pyinstaller:master-py3-i386 -c ". /root/.bashrc && pip install --no-deps --only-binary :all: pygit2 || { apt-get update -y && apt-get install -y cmake && /src/scripts/install-libgit2.sh; } && /entrypoint.sh"
      #       cp dist/linux/run dist/quit-32bit-linux
      #       # Windows
      #       git apply requirements.txt.windows.patch
      #       # Windows 64bit
      #       docker run -v "${{ github.workspace }}:/src/" --entrypoint /bin/sh ghcr.io/white-gecko/docker-pyinstaller:master-py3-win64 -c "apt-get update -y && apt-get install -y git && git clone https://github.com/rdflib/rdflib /wine/drive_c/rdflib && pip install -e /wine/drive_c/rdflib && git clone https://github.com/RDFLib/rdflib-jsonld /wine/drive_c/rdflib-jsonld && pip install -e /wine/drive_c/rdflib-jsonld && /entrypoint.sh"
      #       cp dist/windows/run.exe dist/quit-64bit-windows.exe
      #       # Windows 32bit
      #       docker run -v "${{ github.workspace }}:/src/" --entrypoint /bin/sh ghcr.io/white-gecko/docker-pyinstaller:master-py3-win32 -c "apt-get update -y && apt-get install -y git && git clone https://github.com/rdflib/rdflib /wine/drive_c/rdflib && pip install -e /wine/drive_c/rdflib && git clone https://github.com/RDFLib/rdflib-jsonld /wine/drive_c/rdflib-jsonld && pip install -e /wine/drive_c/rdflib-jsonld && /entrypoint.sh"
      #       cp dist/windows/run.exe dist/quit-32bit-windows.exe
      - name: Release ðŸš€
        uses: softprops/action-gh-release@v1
        with:
          draft: ${{ !startsWith(github.ref, 'refs/tags/') }}
          files: |
                 dist/quit-64bit-linux
                 dist/quit-32bit-linux
                 dist/quit-64bit-windows.exe
                 dist/quit-32bit-windows.exe


  docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3.4.1
        with:
          images: |
            aksw/quitstore
            ghcr.io/aksw/quitstore
      -
        name: Build and push for many architectures
        id: docker_build_tagged
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x
          cache-from: type=registry,ref=aksw/quitstore:latest
          cache-to: type=inline
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
